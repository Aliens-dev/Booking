<?php


namespace Rules;


use App\Models\Admin;
use App\Models\Client;
use App\Models\Renter;
use App\Models\Rule;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class RulesTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /** @test */
    public function getting_all_rules()
    {
        Rule::factory(2)->create();
        $response = $this->json('get','/rules')
            ->assertStatus(200)
            ->assertSee(['success' => true])
            ->assertSee('data')
            ->assertJsonCount(2);

        $this->assertEquals(count($response->json(['data'])),2);
    }
    /** @test */
    public function an_admin_can_add_a_rule()
    {
        $admin = Admin::factory()->create();
        $data = [
            'title' => 'Rule',
            'description' => 'description',
            'title_fr' => 'Rule_fr',
            'description_fr' => 'description_fr',
        ];
        $this->actingAs($admin)->json('post','/rules', $data)
            ->assertStatus(201);
        $this->assertDatabaseCount('rules',1);
    }
    /** @test */
    public function a_renter_cannot_add_a_rule()
    {
        $renter = Renter::factory()->create();
        $data = [
            'title' => 'Rule',
            'description' => 'description',
            'title_fr' => 'Rule_fr',
            'description_fr' => 'description_fr',
        ];
        $this->actingAs($renter)->json('post','/rules', $data)
            ->assertStatus(401);
        $this->assertDatabaseCount('rules',0);
    }
    /** @test */
    public function a_client_cannot_add_a_rule()
    {
        $client = Client::factory()->create();
        $data = [
            'title' => 'Rule',
            'description' => 'description',
            'title_fr' => 'Rule_fr',
            'description_fr' => 'description_fr',
        ];
        $this->actingAs($client)->json('post','/rules', $data)
            ->assertStatus(401);
        $this->assertDatabaseCount('rules',0);
    }
    /** @test */
    public function a_rule_title_is_required()
    {
        $admin = Admin::factory()->create();
        $data = [
            'title' => '',
        ];
        $this->actingAs($admin)->json('post','/rules', $data)
            ->assertStatus(403);
        $this->assertDatabaseCount('rules',0);
    }
    /** @test */
    public function an_admin_can_update_a_rule()
    {
        $admin = Admin::factory()->create();
        $rule = Rule::factory()->create();
        $data = [
            'title' => 'new Rule',
            'description' => 'description',
            'title_fr' => 'new Rule',
            'description_fr' => 'description_fr',
        ];
        $this->actingAs($admin)->json('patch','/rules/' . $rule->id, $data)
            ->assertStatus(200);
        $this->assertDatabaseCount('rules',1);
        $this->assertDatabaseHas('rules',['title' => 'new Rule']);
    }
    /** @test */
    public function on_rule_update_name_is_required()
    {
        $admin = Admin::factory()->create();
        $rule = Rule::factory()->create();
        $data = [
            'title' => '',
        ];
        $this->actingAs($admin)->json('patch','/rules/' . $rule->id, $data)
            ->assertStatus(403);
        $this->assertDatabaseCount('rules',1);
        $this->assertDatabaseHas('rules',['title' => $rule->title]);
    }
    /** @test */
    public function an_admin_can_delete_a_rule()
    {
        $this->withoutExceptionHandling();
        $admin = Admin::factory()->create();
        $rule = Rule::factory()->create();
        $this->actingAs($admin)->json('delete','/rules/'.$rule->id)
            ->assertStatus(200);
        $this->assertDatabaseCount('rules',0);
    }
    /** @test */
    public function a_client_cannot_delete_a_rule()
    {
        $this->withoutExceptionHandling();
        $client = Client::factory()->create();
        $rule = Rule::factory()->create();
        $this->actingAs($client)->json('delete','/rules/'.$rule->id)
            ->assertStatus(401);
        $this->assertDatabaseCount('rules',1);
    }
}
